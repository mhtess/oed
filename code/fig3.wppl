var _ = underscore;


var trialsRaw = project.readCsv('../data/coins-trials.csv')

var comparisons = [
    [fairGroup, biasGroup],
    [biasGroup, markovGroup],
    [fairGroup, biasGroup, markovGroup]
]

// remove spaces from the sequence field
var trials = map(function(row) {
    return _.extend({}, row, {sequence: row.sequence.replace(/ /g,'')})
}, trialsRaw);

// From list of models to prettified string
var comparisonToString = function(cmp) {
    return pam(cmp, function(s) {
        s.name.replace(/Group/, '')
    }).join('-');
};


var out = pam(
    comparisons,
    function(comparison) {

        var outputDict = pamObject(
            _.groupBy(trials, 'sequence'),
            function(seqString, rows) {
                var sequence = parseExperiment(seqString)

                var n = rows.length;
                var eigDist = EIG({
                    M: function() { uniformDraw(comparison) },
                    X: function() { return {n: n, sequence: sequence} },
                    Y: function() { randomInteger(n + 1) }
                })

                // aig
                var frequencies = _.countBy(rows, 'response');

                var aig = AIG({
                    M: function() { uniformDraw(comparison) },
                    x: {n: n, sequence: sequence},
                    y: frequencies['H']
                })

                return {
                    comparison: comparisonToString(comparison),
                    n: n,
                    experiment: seqString,
                    eig: eigDist.support()[0].EIG,
                    aig: aig
                }
            });

        return _.values(outputDict);

    })

JSON.stringify(_.flatten(out), null, 1)
