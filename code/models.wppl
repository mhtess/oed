// subjective randomness

var coinWeights = [0.01, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.99];

// assumes a.length == b.length
var arraysEqual = function(as,bs) {
  return all(idF, map2(function(a, b) { return a === b }, as, bs))
}

var fairSingle = cache(function(sequence) {
  Enumerate(function() {
    return flip()
  })
})
Object.defineProperty(fairSingle, 'name', {value: 'fairSingle'});

var biasSingle = cache(function(sequence) {
  Enumerate(function() {
    var p = uniformDraw(coinWeights);
    var sampled = repeat(sequence.length, function() { flip(p) })
    condition(arraysEqual(sampled, sequence))
    return flip(p);
  })
});
Object.defineProperty(biasSingle, 'name', {value: 'biasSingle'});

var markovSingle = cache(function(sequence) {
  Enumerate(function() {
    var transitionProb = uniformDraw(coinWeights);

    var generateSequence = function(n, flipsSoFar) {
      if (flipsSoFar.length == n) {
        return flipsSoFar;
      } else {
        var lastFlip = last(flipsSoFar);
        return generateSequence(n,
                                append(flipsSoFar,
                                       flip(transitionProb) ? !lastFlip : lastFlip))
      }
    }
    var firstCoin = flip();
    var sampled = generateSequence(sequence.length, [firstCoin]);
    condition(arraysEqual(sampled, sequence));
    return flip( transitionProb ) ? !last(sampled) : last(sampled);
  })
});
Object.defineProperty(markovSingle, 'name', {value: 'markovSingle'});

var groupify = function(m) {
    var gm = function(x, y) {
        var yDist = m(x.sequence);
        var p = Math.exp(yDist.score(true));
        return Binomial({n: x.n, p: p}).score(y);
    }
    Object.defineProperty(gm, 'name', {value: m.name.replace('Single', 'Group')})
    return gm;
}

var fairGroup = groupify(fairSingle),
    biasGroup = groupify(biasSingle),
    markovGroup = groupify(markovSingle);

// [true,false,true,false] -> HTHT
var formatExperiment = function(x) {
  map(function(xi) { return xi ? 'H' : 'T' }, x).join('')
}

// HTHT -> [true,false,true,false]
var parseExperiment = function(str) {
  return map(function(c) { return c == 'H' },
             str.split(''))
}

// category learning

var allExperiments = project.categoryExperiments;

var booleanize = function(exp){
    var helper = function(ar) { pam(ar, function(e) { e == 1}) }
    return {as: map(helper, exp.as), bs: map(helper, exp.bs)}
};

var _ms78 = {as: [[1, 1, 1, 0], [1, 0, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], bs: [[1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 1], [0, 0, 0, 0]]};
var ms78 = booleanize(_ms78);
var _opt = {as: [[0,0,0,1], [0,0,1,1], [1,1,0,0], [1,1,1,0], [1,1,1,1]], bs: [[0,1,0,0], [0,1,1,0], [1,0,0,0], [1,0,1,0]]}
var opt = booleanize(_opt);
// swaps first A and first B of opt
var _dummyx = {as: [[0,1,0,0], [0,0,1,1], [1,1,0,0], [1,1,1,0], [1,1,1,1]], bs: [[0,0,0,1], [0,1,1,0], [1,0,0,0], [1,0,1,0]]};
var dummyx = booleanize(_dummyx);

var log = function(x) { Math.log(x) };
var exp = function(x) { Math.exp(x) };
var pam = function(a,f) { map(f,a) };
var pamObject = function(a,f) { mapObject(f,a) };
var vectorAdd = function(xs,ys) { map2(function(x,y) { x + y }, xs,ys) };
var columnSum = function(ar) { reduce(vectorAdd, ar[0], ar.slice(1)) };

var objects = Enumerate(function() { repeat(4,flip) }).support();

var prototypeSingle = cache(function(x) {
    var as = x.as, bs = x.bs,
    recall = append(as, bs);

    var recallStrings = map(function(obj) { obj.join(',') }, recall);

    // returns true if x is in the training set, false if not
    var isRecall = (function(obj) {
        var objString = obj.join(',');
        return _.contains(recallStrings, objString);
    });

    var g = function() {
        var weights = repeat(4, function() { uniform(0, 1) });
        var alpha = uniform(0,5);
        var bias = uniform(-1, 1);

        pam(objects,
            function(object) {
                // a function of dimension index
                var dimensionalEvidenceForA = function(i) {
                    var matchingObjects = filter(function(x) { return x[i] == object[i] },
                                                 recall);
                    var n = matchingObjects.length;
                    var nA = filter(function(x) { return as.indexOf(x) > -1 },
                                    matchingObjects).length;
                    var nB = n - nA;
                    return weights[i] * (nA - nB)/n;
                }

                // factor: log-probability that object is an A
                // prob is 1 / (1 + exp(-alpha * sum_j[w_j * I_j]))
                // log prob is -log(1 + exp(-alpha * sum_j[w_j * I_j]))

                var totalEvidence = sum(map(dimensionalEvidenceForA,[0,1,2,3])) + (isRecall(object) ? bias : 0);

                var prob = 1 / (1 + exp(-alpha * totalEvidence));

                //factor(log(prob));

                return prob;
            })
    };

    var numSamples = 5000;
    // do it with MH here so that inference doesn't reach inside this function
    var dist = MH(g, numSamples).support();

    // get expected distribution on responses
    return pam(columnSum(dist), function(x) { return x / numSamples });
})
Object.defineProperty(prototypeSingle, 'name', {value: 'prototypeSingle'});

var exemplarSingle = cache(function(x) {
    var as = x.as, bs = x.bs;
    var g = function() {
        var weights = repeat(4, function() { uniform(0, 1) });

        pam(objects,
            function(object) {
                var similarity = function(x,y) {
                    var dimMatches = map2(function(xi,yi) {
                        return xi == yi
                    },x,y);
                    var probs = map2(function(b,p) {
                        return b ? 1 : p
                    },dimMatches, weights);
                    return product(probs);
                };


                // sum of similarities to a
                var ssa = sum(map(function(a) { return similarity(object, a) },
                                  as));

                // sum of similarities to b
                var ssb = sum(map(function(b) { return similarity(object, b) },
                                  bs));

                var prob = ssa / (ssa + ssb);

                return prob;
            });
    };
    var numSamples = 5000;
    var dist = MH(g, numSamples).support();

    // get expected distribution on responsesp
    return pam(columnSum(dist), function(x) { return x / numSamples });
})
Object.defineProperty(exemplarSingle, 'name', {value: 'exemplarSingle'});

var categoryGroupify = function(m) {
    // responses is an object {n: n, numAs: [nA1, nA2, ...]}
    // e.g.,
    var gm = function(x, responses) {
        var yDist = m(x);
        var n = responses.n;

        var LL = sum(map2(function(p, k) { return score(Binomial({n: n, p: p}), k) },
                          yDist,
                          responses.numAs))

        return LL;
    }
    Object.defineProperty(gm, 'name', {value: m.name.replace('Single', 'Group')})
    return gm;
}

var exemplarGroup = categoryGroupify(exemplarSingle);
var prototypeGroup = categoryGroupify(prototypeSingle);
